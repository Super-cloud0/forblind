import os
import time
import pyttsx3
import requests
from io import BytesIO
from PIL import Image
from dotenv import load_dotenv
import google.generativeai as genai
import speech_recognition as sr

load_dotenv()
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not GEMINI_API_KEY:
    raise ValueError("‚ùå –û—à–∏–±–∫–∞: API-–∫–ª—é—á GEMINI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env")

genai.configure(api_key=GEMINI_API_KEY)

ESP32_IP = "http://192.168.137.99"
MODEL_NAME = "gemini-2.5-pro"
SYSTEM_INSTRUCTION = (
    "–¢—ã ‚Äî –≥–ª–∞–∑–∞ –Ω–µ–∑—Ä—è—á–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞. –û–ø–∏—à–∏ —Ç–æ–ª—å–∫–æ –≤–∞–∂–Ω–æ–µ –¥–ª—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. "
    "1) –ª—é–¥–∏, 2) —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, 3) –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è, 4) –æ–±—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ. 5)–µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–æ—á–∏—Ç–∞–π –µ–≥–æ –ö—Ä–∞—Ç–∫–æ ‚Äî 1‚Äì2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
)
TEMPERATURE = 0.3
def capture_image():
    print("üì∏ –ó–∞—Ö–≤–∞—Ç—ã–≤–∞—é –∫–∞–¥—Ä —Å ESP32-CAM...")
    response = requests.get(f"{ESP32_IP}/capture", timeout=15)
    response.raise_for_status()
    img = Image.open(BytesIO(response.content))
    img.save("last_capture.jpg")
    print("‚úÖ –°–æ—Ö—Ä–∞–Ω—ë–Ω –∫–∞–¥—Ä: last_capture.jpg")
    return img


def describe_image(image: Image.Image) -> str:
    print("ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ Gemini AI...")
    model = genai.GenerativeModel(
        model_name=MODEL_NAME,
        system_instruction=SYSTEM_INSTRUCTION
    )
    response = model.generate_content(["–û–ø–∏—à–∏ —ç—Ç—É —Å—Ü–µ–Ω—É.", image])
    if hasattr(response, "text"):
        return response.text
    return str(response)


def speak(text, lang_hint="ru"):
    """
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º pyttsx3 –ø—Ä—è–º–æ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥—ã–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º.
    –î–æ–±–∞–≤–ª—è–µ–º –º–∞–ª–µ–Ω—å–∫—É—é –ø–∞—É–∑—É –ø–µ—Ä–µ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º, —á—Ç–æ–±—ã –û–° —É—Å–ø–µ–ª–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∞—É–¥–∏–æ-—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
    –ø–æ—Å–ª–µ —Ä–∞–±–æ—Ç—ã —Å –º–∏–∫—Ä–æ—Ñ–æ–Ω–æ–º.
    """
    try:
        if not text:
            return
        time.sleep(0.15)
        engine = pyttsx3.init()
        
        engine.setProperty("rate", 170)
        engine.setProperty("volume", 1.0)
     
        engine.say(text)
        engine.runAndWait()
   
        try:
            engine.stop()
        except Exception:
            pass
    except Exception as e:
        print("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ TTS:", e)


def listen_for_command():
    recognizer = sr.Recognizer()
    try:
        with sr.Microphone() as source:
            print("üéß –°–ª—É—à–∞—é –∫–æ–º–∞–Ω–¥—É... (—Å–∫–∞–∂–∏: '–æ–ø–∏—à–∏ —á—Ç–æ –≤–æ–∫—Ä—É–≥ –º–µ–Ω—è' –∏–ª–∏ '—Å—Ç–æ–ø' –¥–ª—è –≤—ã—Ö–æ–¥–∞)")
            # –ú–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å recognizer.adjust_for_ambient_noise(source, duration=0.5)
            audio = recognizer.listen(source, timeout=6, phrase_time_limit=6)
    except sr.WaitTimeoutError:
        print("‚è± –¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã.")
        return ""
    try:
        command = recognizer.recognize_google(audio, language="ru-RU").lower()
        print(f"üó£ –¢—ã —Å–∫–∞–∑–∞–ª: {command}")
        return command
    except sr.UnknownValueError:
        print("‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É.")
        return ""
    except sr.RequestError as e:
        print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")
        return ""



print("ü§ñ –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –Ω–µ–∑—Ä—è—á–∏—Ö –∑–∞–ø—É—â–µ–Ω. –ì–æ—Ç–æ–≤ —Å–ª—É—à–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã.")
speak("–Ø –≥–æ—Ç–æ–≤. –°–∫–∞–∂–∏: –æ–ø–∏—à–∏ —á—Ç–æ –≤–æ–∫—Ä—É–≥ –º–µ–Ω—è, —á—Ç–æ–±—ã —è —Ä–∞—Å—Å–∫–∞–∑–∞–ª, —á—Ç–æ –≤–∏–∂—É.")

while True:
    command = listen_for_command()


    if "—Å—Ç–æ–ø" in command or "–≤—ã–∫–ª—é—á–∏—Å—å" in command or "–≤—ã—Ö–æ–¥" in command:
        speak("–•–æ—Ä–æ—à–æ, –∑–∞–≤–µ—Ä—à–∞—é —Ä–∞–±–æ—Ç—É. –ü–æ–∫–∞.")
        break

    if "–æ–ø–∏—à–∏" in command and "–≤–æ–∫—Ä—É–≥" in command:
        try:

            time.sleep(0.1)
            img = capture_image()
            description = describe_image(img)
            print("\n--- –û–ü–ò–°–ê–ù–ò–ï ---\n", description, "\n----------------")
            speak(description)
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {e}")
            speak("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–ø–∏—Å–∞–Ω–∏–∏ —Å—Ü–µ–Ω—ã.")
    elif command:
        speak("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ü–æ–≤—Ç–æ—Ä–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
 
